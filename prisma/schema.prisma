generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  establishmentName String?     
  accounts       Account[]
  sessions       Session[]   
  Product        Product[]
  Expenses       Expenses[]
  ProductSales   ProductSales[]
  ExpensesRec    ExpensesRec[]
  SalesRec       SalesRec[]
  ProductIn      ProductIn[]
  ProductOut     ProductOut[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id         String       @id @default(cuid())
  name       String?
  brand      String?
  unit       String?
  limit      Int?
  stock      Int?
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProductIn  ProductIn[]
  ProductOut ProductOut[]
}

model Expenses {
  id          String        @id @default(cuid())
  name        String        @unique
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  ExpensesRec ExpensesRec[]
}

model ProductSales {
  id       String     @id @default(cuid())
  name     String     @unique
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  SalesRec SalesRec[]
}

model ExpensesRec {
  id         String   @id @default(cuid())
  date       DateTime
  value      Float
  expensesId String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses   Expenses @relation(fields: [expensesId], references: [id], onDelete: Cascade)
}

model SalesRec {
  id         String       @id @default(cuid())
  date       DateTime
  value      Float
  quantity   Int
  prodsaleId String
  userId     String
  prodsale   ProductSales @relation(fields: [prodsaleId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductIn {
  id        String   @id @default(cuid())
  date      DateTime
  quantity  Int
  value     Float?
  productId String
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductOut {
  id        String   @id @default(cuid())
  date      DateTime
  quantity  Int
  motive    String?
  productId String
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
