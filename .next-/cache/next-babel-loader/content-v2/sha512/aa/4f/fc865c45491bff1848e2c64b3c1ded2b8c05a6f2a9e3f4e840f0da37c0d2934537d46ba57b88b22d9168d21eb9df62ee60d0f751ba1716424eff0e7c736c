{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from 'next-auth';\nimport GithubProvider from 'next-auth/providers/github';\nimport { PrismaAdapter } from '@next-auth/prisma-adapter';\nimport prisma from '../../../lib/prisma';\nexport const authOptions = {\n  // Configure one or more authentication providers\n  providers: [GithubProvider({\n    clientId: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET\n  }) // ...add more providers here\n  ],\n  secret: process.env.NEXTAUTH_SECRET,\n  adapter: PrismaAdapter(prisma),\n  callbacks: {\n    session: ({\n      session,\n      user\n    }) => _objectSpread(_objectSpread({}, session), {}, {\n      user: _objectSpread(_objectSpread({}, session.user), {}, {\n        id: user.id,\n        username: user.username\n      })\n    })\n  }\n};\nexport default NextAuth(authOptions);","map":{"version":3,"sources":["C:/Users/joaop/Desktop/React/Next.js/sistock/src/pages/api/auth/[...nextauth].ts"],"names":["NextAuth","GithubProvider","PrismaAdapter","prisma","authOptions","providers","clientId","process","env","GITHUB_ID","clientSecret","GITHUB_SECRET","secret","NEXTAUTH_SECRET","adapter","callbacks","session","user","id","username"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzB;AACAC,EAAAA,SAAS,EAAE,CACTJ,cAAc,CAAC;AACbK,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADT;AAEbC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFb,GAAD,CADL,CAKT;AALS,GAFc;AASzBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK,eATK;AAUzBC,EAAAA,OAAO,EAAEZ,aAAa,CAACC,MAAD,CAVG;AAWzBY,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE,CAAC;AAAEA,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAD,qCACJD,OADI;AAEPC,MAAAA,IAAI,kCACCD,OAAO,CAACC,IADT;AAEFC,QAAAA,EAAE,EAAED,IAAI,CAACC,EAFP;AAGFC,QAAAA,QAAQ,EAAEF,IAAI,CAACE;AAHb;AAFG;AADA;AAXc,CAApB;AAuBP,eAAenB,QAAQ,CAACI,WAAD,CAAvB","sourcesContent":["import NextAuth from 'next-auth';\r\nimport GithubProvider from 'next-auth/providers/github';\r\nimport { PrismaAdapter } from '@next-auth/prisma-adapter';\r\nimport prisma from '../../../lib/prisma';\r\n\r\nexport const authOptions = {\r\n  // Configure one or more authentication providers\r\n  providers: [\r\n    GithubProvider({\r\n      clientId: process.env.GITHUB_ID,\r\n      clientSecret: process.env.GITHUB_SECRET\r\n    })\r\n    // ...add more providers here\r\n  ],\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  adapter: PrismaAdapter(prisma),\r\n  callbacks: {\r\n    session: ({ session, user }) => ({\r\n      ...session,\r\n      user: {\r\n        ...session.user,\r\n        id: user.id,\r\n        username: user.username\r\n      }\r\n    })\r\n  }\r\n};\r\n\r\nexport default NextAuth(authOptions);\r\n"]},"metadata":{},"sourceType":"module"}